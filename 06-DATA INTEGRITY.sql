----------------------------DATA INTEGRITY---------------------

--IS NOTHING BUT TO MAINTAINE ACCURATE & CONSISTANCY DATA IN DB TABLES
    --1) DECLARATIVE DATA INTEGRITY
        -- PRE-DEFINED INTEGRITY
        -- CAN BE IMPLEMENTED WITH HELP OF 'CONSTRANTS'(SQL)
    --2) PROCEDDURE DATA INTEGRITY
        -- USER-DEFINED INTEGRITY
        -- CAN BE IMPLEMENTED WITH HEPL OF 'TRIGGERS'(PL/SQL)
        
---------------------------DECLARATIVE INTEGRITY-----------------------

    --1)ENTITY INTEGRITY
        -- EACH ROW IS UNIQUELY INDENTIFY IN A TABLE IS CALLED 'ENTITY INTEGRITY'
        -- CAN BE IMPLEMENTED WITH HEPL OF 'UNIQUE, PRIMARY KEY'
    --2)REFERNCIAL INTEGRITY
        -- TO MAKE RELATIONSHIP BETWEEN TABLES
        -- WITH THE HEPL OF 'FOREIGN KEY(REFERENCES KEY')
    --3)DOMAIN INTEGRITY
        -- DOMAIN IS A COLUMN.
        -- BEFORE TO ACCEPT A VALUE INTO A COLUMN , FIRST IT WILL CHECK THAT VALUE IS VALID/INVALID. IF VALID THEN ACCEPTED OTHERWISE NOT ACCEPT.
        --WITH THE HEPL OF 'CHECK ,NOT NULL'.
        
--------------------CONTRAINTS------------------------

    --ARE USED TO RESTRICTED/ENFORCE UNWANTED /INVALID DATA INTO A TABLE.
        --UNIQUE
        --NOT NULL
        --CHECK
        --PRIMARY KEY
        --FOREING KEY(REFERENCE)
        
--1) COLUMN LEVEL
    --WE ARE DEFINING CONSTRAINST ON INDIVIDUAL COLUMNS
    -- SYNTAX: CREATE TABLE <TN> (<COLUMN NAME1><DATA TYPE><CONSTRAINTS TYPE>,<COLUMN NAME2><DATA TYPE><CONSTRAINTS TYPE>)...);
--2) TABLE LEVEL
    --WE ARE DEFINING CONSTRAINST AFTER ALL COLUMNS ARE DECLARED (IE. END OF THE TABLE DEFINATION)
    --SYNTAX: CREATE TABLE <TN> (<COLUMN NAME1><DATA TYPE>,<COLUMN NAME2><DATA TYPE>,...,<CONSTARINTS TYPE>(<COLUMN NAME1>),<COLUMN NAME2>,....));
    
    
    
-----------UNIQUE---------------

    --TO RESTRICTED DUPLICATE VALUES BUT ALLOW NULL VALUES INTO A COLLUMN.

CREATE TABLE TEST(SNO INT UNIQUE,NAME VARCHAR2(10) UNIQUE) ;   

INSERT INTO TEST VALUES (1,'SAI');

INSERT INTO TEST VALUES (1,'RK');                   --ORA-00001: unique constraint (C##JAVA.SYS_C007568) violated

INSERT INTO TEST VALUES (NULL,NULL); 

SELECT * FROM TEST;


---TABLE LEVEL

CREATE TABLE TEST1(SNO INT ,SNAME VARCHAR2(10) ,UNIQUE(SNO,SNAME)) ;  

INSERT INTO TEST1 VALUES (1,'SAI');

INSERT INTO TEST1 VALUES (1,'SAI');     ---ORA-00001: unique constraint (C##JAVA.SYS_C007570) violated

INSERT INTO TEST1 VALUES (1,'RK');                   

INSERT INTO TEST1 VALUES (NULL,NULL); 

SELECT * FROM TEST1;


---------------NOT NULL-----------------

    --TO RESTRICTED NULLS BUT ACCEPTING DUPLICATE DATA.
    --THIS CONSTRAINST WE CAN NOT APPLY ON TABLE LEVEL.
CREATE TABLE TEST2(SNO INT NOT NULL ,SNAME VARCHAR2(10) NOT NULL ) ;  
    
INSERT INTO TEST2 VALUES (1,'RK');  
INSERT INTO TEST2 VALUES (1,'RK');  

INSERT INTO TEST2 VALUES (NULL,NULL); 

SELECT * FROM TEST2;

--------------------CHECK---------------------------------

    --TO CHECK A VALUE WITH USER DEFINE CONDITION 
    --BEFORE ALLOWED VALUES INTO A COLUMN.

--COLUMN LEVEL
CREATE TABLE TEST3(SNO INT,SNAME VARCHAR2(10),SAL NUMBER(10) CHECK(SAL>8000) ) ;  

INSERT INTO TEST3 VALUES (NULL,NULL,7500);      --ORA-02290: check constraint (C##JAVA.SYS_C007573) violated

CREATE TABLE TEST4(SNAME VARCHAR2(10),SAL NUMBER(10), CHECK(SNAME=LOWER(SNAME) AND SAL>8000) ) ; 

INSERT INTO TEST4 VALUES (NULL,7500);           --ORA-02290: check constraint (C##JAVA.SYS_C007574) violated

----------------------------------PRIMARY KEY---------------------------------

    --TO RESTRICTED DUPLICATION & NULLS.
        --PRIMARY KEY = UNIQUE +NOT NULL
    --TABLE IS HAVING ONLY ONE PRIMARY KEY.
---COLUMN LEVEL---    
CREATE TABLE STUDENT(SSNO INT PRIMARY KEY,PNAME VARCHAR2(10));    
    
INSERT INTO STUDENT VALUES(1,'K');    

INSERT INTO STUDENT VALUES(1,'N');               --ORA-00001: unique constraint (C##JAVA.SYS_C007575) violated


----TABLE LEVEL-----------------
CREATE TABLE STUDENT1(SSNO INT ,PNAME VARCHAR2(10),PRIMARY KEY(SSNO,PNAME));  

INSERT INTO STUDENT1 VALUES(1,'N');  

INSERT INTO STUDENT1 VALUES(1,'N');             --ORA-00001: unique constraint (C##JAVA.SYS_C007576) violated


------NOTE-------

    --WHEN WE APPLY UNIQUE CONSTRAINST ON MULTIPLE COLUMNS THEN WE CALLED AS 'COMPOSITE  UNIQUE'
    --WHEN WE APPLY PRIMARY KEY ON MULTIPLE COLUMN THEN WE CALLED AS 'COMPOSITE PRIMARY KEY'
    
    
-------------------FOREIGN KEY--------------------------
    --IS USED TO CREATEA RELATIOSHIP BETWEEN TABLES.
    
    --BASIC RULES
        --ONE TABLE SHOULD HAVE PRIMARY KEY & ANOTHER TABLE SHOULD HAVE 'FOREIGN KEY'.
        --PK & FK COLUMN MUST BE COMMON COLUMN ONLY.
        --COMMON COLUMN DATA TYPE MUST BE MATCHED.
        --WHICH TABLE HAVING PK---->PARENT
        --WHICH TABLE IS HAVING FK----->CHILD
        --FOREIGN KEY COLUMN VALUES MUST BE PRIMARY KEY COLUMN VALUES ONLY.
        --BY DEAULT FOREIGN KEY IS ACCEPTING DUPLICATES AND NULLS.
        
CREATE TABLE DEPT1(DEPTNO INT PRIMARY KEY ,DNAME VARCHAR2(10));

INSERT INTO DEPT1 VALUES(10,'ORACLE');

INSERT INTO DEPT1 VALUES(20,'JAVA');

COMMIT;

CREATE TABLE EMP1(EID INT PRIMARY KEY,ENAME VARCHAR2(20),DEPTNO INT REFERENCES DEPT1(DEPTNO));

INSERT INTO EMP1 VALUES(101,'KIRAN',10);

INSERT INTO EMP1 VALUES(102,'JONES',20);

INSERT INTO EMP1 VALUES(103,'STAR',10);

INSERT INTO EMP1 VALUES(104,'ALYX',20);

SELECT * FROM EMP1 E NATURAL JOIN DEPT1 D ; 

------------------------------INSERTION RULE-------------------
    --WE CAN NOT INSERT VALUES INTO FOREIGN KEY COLUMN THOSE VALUES ARE NOT EXISTING IN PRIMARY KEY COLUMN OF PARENT TABLE.
    
------------------------------DELETION RULE--------------------
    --WE CAN NOT DELETE A ROW DATA FROM PARENT TABLE AND THOSE ROWS ARE ASSOCIATED WITH CHILD TABLE WITHHOUT ADDRESSING.
    
--NOTE 
    --IF WE WANT TO DELETE PARENT ROW FROM PARENT TABLE THE WE USE SOME RULES ARE CALLED AS 'CASCAADE RULES'.
    --1)ON DELETE CASCADE
        -- WHEN WE DELETE ROW FROM PARENT TABLE THEN THE ASSOCIATEDD ROWS IN CHILD TABLE ALSO DELETED
        

CREATE TABLE DEPT2(DEPTNO INT PRIMARY KEY ,DNAME VARCHAR2(10));

INSERT INTO DEPT2 VALUES(10,'ORACLE');

INSERT INTO DEPT2 VALUES(20,'JAVA');

COMMIT;

CREATE TABLE EMP2(EID INT PRIMARY KEY,ENAME VARCHAR2(20),DEPTNO INT REFERENCES DEPT1(DEPTNO) ON DELETE CASCADE);

INSERT INTO EMP2 VALUES(101,'KIRAN',10);

INSERT INTO EMP2 VALUES(102,'JONES',20);

INSERT INTO EMP2 VALUES(103,'STAR',10);

INSERT INTO EMP2 VALUES(104,'ALYX',20);

SELECT * FROM EMP2 E NATURAL JOIN DEPT2 D ; 

DELETE FROM DEPT2 WHERE DEPTNO=20;   

SELECT * FROM EMP2 E NATURAL JOIN DEPT2 D ; 

    --2)ON DELETE SET NULL
        ---- WHEN WE DELETE ROW FROM PARENT TABLE THEN THE ASSOCIATEDD ROWS IN CHILD TABLE ARE CONVERTING INTO NULLS.
        CREATE TABLE EMP2(EID INT PRIMARY KEY,ENAME VARCHAR2(20),DEPTNO INT REFERENCES DEPT1(DEPTNO) ON DELETE SET NULL);
        
        
        
------------------JOIN-----------------------------

--JOINS ARE USED TO RETRIEVE THE REQIURED DATA/INFORMATION FROM MULTIPLE TABLES AT A TIME
--JOINS CAN BE WRITTEN INTO TWO WAYS
--1)NON-ANSI FORMAT JOIN(ORACLE 8I JOINS)
        --EQUI JOIN
        --NON-EQUI JOIN
        --SELF JOIN
--2)ANSI FORMAT JOINS(ORACLE 9I JOINS)
        --INNER JOIN
        --OUTER JOIN
            --LEFT OUTER JOIN
            --RIGHT OUTER JOIN
            --FULL OUTER JOIN
        --CROSS JOIN/CARTISEAN JOIN
        --NATURAL JOIN

--WHEN WE RETRIEVE DATA FROM MULTIPLE TABLES BASED ON 'WHERE' CLAUSE CONDITION IS CALLED AS 'NON-ANSI' FORMAT JOIN.

--WHEN WE RETRIEVE DATA FROM MULTIPLE TABLES BASED WITH 'ON' CLAUSE CONDITION IS CALLED AS 'ANSI' FORMAT JOIN.

------------------------------EQUI JOIN--------------------
    -- WHEN WE RETRIEVE DATA FROM MULTIPLE TABLES BASED ON AN '=' OPERATOR
    -- WHEN WE USE EQUI JOIN ON TABLES THEN WE SHOULD HAVE AT LEAST ONE COMMON COLUMN IN BOTH TABLES.
    -- COMMON COLUMN DATATYPE MUST MATCH IN BOTH TABLES
    -- WHEN WE USE EQUI JOIN / ANY JOIN IN BETWEEN TABLES THEN THERE IS NO NEED TO HAVE
                --REALATIONSHIP(OPTIONAL)BETWEEN TABLES.
                
SELECT * FROM PRODUCTS, product_categories WHERE PRODUCTS.CATEGORY_ID = product_categories.CATEGORY_ID;

SELECT * FROM DEPT;

SELECT * FROM EMP;

SELECT * FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO; 

SELECT DNAME,SUM(SAL) SUMOFSALARY FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO GROUP BY DNAME;

SELECT DNAME,SUM(SAL) SUMOFSALARY FROM EMP E,DEPT D WHERE E.DEPTNO=D.DEPTNO GROUP BY DNAME HAVING SUM(SAL)>10000;


--------------------------------------INNER JOIN-------------------------------------
    --IT IS SIMILAR TO EQUI JOIN(NON ANSI) BUT INNER JOIN(ANSI).
    --EQUI/INNER JOINS ARE RETRIEVE MATCHING ROWS/DATA FROM MULTIPLE TABLE
    --IF WE WANT RETRIEVING MATCHING ALONG WITH UN MATCHING ROWS / DATA FROM MULTIPLE TABLE BY USING 'OUTER JOIN' MECHANISM.
    
SELECT * FROM PRODUCT_CATEGORIES;

SELECT * FROM PRODUCTS;

SELECT * FROM PRODUCTS P INNER JOIN PRODUCT_CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID  ;

SELECT CATEGORY_NAME,SUM(LIST_PRICE-STANDARD_COST) PROFIT FROM PRODUCTS P INNER JOIN PRODUCT_CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID GROUP BY CATEGORY_NAME  ;  


--------------------------------OUTER JOIN--------------------------------

    --IF WE WANT RETRIEVING MATCHING ALONG WITH UN MATCHING ROWS / DATA FROM MULTIPLE TABLE BY USING 'OUTER JOIN' MECHANISM.
            --1).LEFT OUTER JOIN
                -- RETRIEVING MATCHING ROWS FROM BOTH TABLES AND UN MATCHING ROWS FROM LEFT SIDE TABLE ONLY.
SELECT * FROM PRODUCTS P LEFT OUTER JOIN PRODUCT_CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID;    
                --NON-ANSI FORMAT
                    --WHEN WE WANT TO WRITE OUTER JOIN IN NON-ANSI FORMAT THEN WE SHOULD JOIN OPERATOR IS(+)

SELECT * FROM PRODUCTS P , PRODUCT_CATEGORIES C WHERE P.CATEGORY_ID = C.CATEGORY_ID(+) ;                    
            --2).RIGHT OUTER JOIN 
                ---- RETRIEVING MATCHING ROWS FROM BOTH TABLES AND UN MATCHING ROWS FROM RIGHT SIDE TABLE ONLY.
SELECT * FROM PRODUCTS P RIGHT OUTER JOIN PRODUCT_CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID;   
--NON-ANSI FORMAT
SELECT * FROM PRODUCTS P , PRODUCT_CATEGORIES C WHERE P.CATEGORY_ID(+) = C.CATEGORY_ID ; 

            --3).FULL OUTER JOIN
                --SUPPORTING BOTH LEFT AND RIGHT OUTER JOINS.
                --RETRIEVING MATCHING AND UN MATCHING ROEWS FROM MULTIPLE TABLES
SELECT * FROM PRODUCTS P FULL OUTER JOIN PRODUCT_CATEGORIES C ON P.CATEGORY_ID = C.CATEGORY_ID; 
--NON-ANSI FORMAT
SELECT * FROM PRODUCTS P , PRODUCT_CATEGORIES C WHERE P.CATEGORY_ID(+) = C.CATEGORY_ID
UNION
SELECT * FROM PRODUCTS P , PRODUCT_CATEGORIES C WHERE P.CATEGORY_ID = C.CATEGORY_ID(+); 


-------------------------------------CROSS JOIN--------------------------

    --TO JOIN TWO OR MORE THAN TWO TABLES ROW WITHOUT ANY CONDITION
    --FIRST TABLE HAVING 'M' NO. OF ROWS AND SECOND TABLE IS HAVING 'N' NO. OF ROWS THEN THE RESULT IS'M'*'N' ROWS
    --IN THIS CROSS JOIN EACH ROW IN A TABLE IS JOINS WITH EACH ROW OF ANOTHER TABLE.
    --  M=3,N=4=====>M*N=======>12ROWS
SELECT * FROM PRODUCTS CROSS JOIN PRODUCT_CATEGORIES;    


----------------------NON-EQUI JOIN-------------------------
    --TO RETRIEVE DATA FROM MULTIPLE TABLES BASED ON ANY CONDITION
    --EXCEPT AN '=' OPERATOR CONDITION.
    --CAN USE <,>,<=,>=,!=,BETWEEN<AND,OR......ETC
SELECT * FROM PRODUCTS P , PRODUCT_CATEGORIES C WHERE P.CATEGORY_ID > C.CATEGORY_ID   ; 



--------------------NATUARAL JOIN--------------------------------

    --SIMILAR TO EQUI JOIN/INNER JOIN.
    --RETRIEVE DATA FROM MULTIPLE TABLES BASED ON AN '=' OPERATOR.
    --TO ELIMINATE DUPLLICATE COLUMNS
    --JOIN CONDITION NOT NEED TO WRITE BY EXPLICITLY(USER DEFINE)
    --BY DEFAULT ORACLE SERVER IS PREPARING JOIN CONDITION BASED ON AN '='OPERATOR.
    
    
SELECT * FROM PRODUCTS P NATURAL JOIN PRODUCT_CATEGORIES C ;     

-----------------------SELF JOIN--------------------------
    --JOINING A TABLE BY ITSELF IS CALLED AS 'SELF JOIN'.
    --WORK ON A SINGLE TABLE DATA OPERATION.
    --WHEN WE USE SELF JOIN MECHANISM THEN WE SHOULD NEED TO CREATE 'ALIAS NAME'ON BASE TABLE.
    --WHEN WE CREATE ALIAS NAMES ON TABLE INTERNALLY ORACLE SERVER IS CREATING VIRTUAL TABLE ON EACH ALIAS NAME.
    --WE CAN CREATE ANY NO. OF ALIAS NAME ON A TABLE BUT EACH ALIAS NAME SHOULD BE DIFFERENT.
    
    
    